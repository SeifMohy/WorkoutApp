generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id
  email String? @unique

  image       String?
  name        String?
  age         Int?
  gender      String?
  height      Int?
  streakCount Int?
  weight      Int?
  GymDay      GymDay[]
  userLogs    UserLog[]
}

model Workout {
  id        Int           @id @default(autoincrement())
  name      String
  imgUrl    String
  GymDay    GymDay[]
  exercises WorkoutLine[]
}

model Exercise {
  id          Int           @id @default(autoincrement())
  videoUrl    String
  description String
  name        String
  workouts    WorkoutLine[]
}

model WorkoutLine {
  id         Int       @id @default(autoincrement())
  sugWeight  Int
  sugSets    Int
  sugReps    Int
  steps      Int
  exerciseId Int
  workoutId  Int
  exercise   Exercise  @relation(fields: [exerciseId], references: [id])
  workout    Workout   @relation(fields: [workoutId], references: [id])
  userLogs   UserLog[]
}

model UserLog {
  id            Int         @id @default(autoincrement())
  weight        Int
  reps          Int
  setNumber     Int
  date          DateTime    @default(now())
  workoutLineId Int
  userId        String
  gymdayId      String
  GymDay        GymDay      @relation(fields: [gymdayId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  workoutLine   WorkoutLine @relation(fields: [workoutLineId], references: [id])
}

model GymDay {
  id            String    @id
  dateCreated   DateTime  @default(now())
  activeWorkout Boolean
  workoutStart  DateTime  @default(now())
  workoutFinish DateTime?
  workoutId     Int
  userId        String
  User          User      @relation(fields: [userId], references: [id])
  Workout       Workout   @relation(fields: [workoutId], references: [id])
  UserLog       UserLog[]
}
