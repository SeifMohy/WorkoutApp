// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}




model Profile {
  id Int      @id @default(autoincrement())
  firstName String   @db.VarChar(25)
  lastName String @db.VarChar(25)
  email   String  @unique @db.VarChar(50) 
  password String  @db.VarChar(50) 
  gender  Boolean 
  age Int 
  weight Int 
  height Int 
  userLogs UserLog[] //one user with userlogs
}

model Workout {
  id     Int     @id @default(autoincrement())
  name    String   @db.VarChar(25)
  imgUrl String 
  //relationship with exerecise
  exercises WorkoutLine[]
}

model Excercise {
  id      Int      @id @default(autoincrement())
  name    String @db.VarChar(255)
  videoUrl String  @db.VarChar(255)
  description String @db.VarChar(500)    
  //relationship with workout
  workouts WorkoutLine[]
}

model WorkoutLine {
  id     Int     @id @default(autoincrement())
  recWeight Int 
  recSets Int 
  recReps Int 
  steps Int 
  userlogs UserLog[] //one workout to many userlogs 
  exercise Excercise @relation(fields:[exerciseId], references:[id])
  exerciseId Int
  workout Workout @relation(fields: [workoutId], references: [id]) 
  workoutId Int

}

model UserLog {
  id     Int     @id @default(autoincrement())
  weight Int 
  reps Int 
  setNumber Int 
  date  DateTime   @default(now())
  profile Profile @relation(fields: [profileId], references: [id]) //many userlogs to one user
  profileId Int 
  workoutLine WorkoutLine @relation(fields: [workoutLineId], references: [id])//many userlogs to one workout line
  workoutLineId Int 
}